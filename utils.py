from datetime import datetime
import logging
from typing import Optional

logger = logging.getLogger(__name__)

def now_iso() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ"""
    return datetime.utcnow().isoformat()

def log_trade_entry(strategy: str, symbol: str, price: float, volume: float):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É"""
    message = (
        f"[{now_iso()}] üìà –í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É | "
        f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy} | "
        f"–ü–∞—Ä–∞: {symbol} | "
        f"–¶–µ–Ω–∞: {price:.4f} | "
        f"–û–±—ä–µ–º: {volume:.2f}"
    )
    logger.info(message)
    print(message)

def log_trade_exit(trade_id: int, price: float, profit: Optional[float]):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Å–¥–µ–ª–∫–∏"""
    profit_str = f"{profit:.2f}%" if profit is not None else "N/A"
    message = (
        f"[{now_iso()}] üìâ –í—ã—Ö–æ–¥ –∏–∑ —Å–¥–µ–ª–∫–∏ | "
        f"ID: {trade_id} | "
        f"–¶–µ–Ω–∞: {price:.4f} | "
        f"–ü—Ä–∏–±—ã–ª—å: {profit_str}"
    )
    logger.info(message)
    print(message)

def calculate_percentage_change(entry: float, exit: float) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    return ((exit - entry) / entry) * 100
