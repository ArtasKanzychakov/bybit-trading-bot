import os
import logging
from logging.handlers import RotatingFileHandler
from typing import Any, Dict
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler, CallbackContext, TypeHandler
)
from dotenv import load_dotenv
from trade_engine import TradeEngine
from db import get_user_settings, update_user_settings, get_open_trades, get_trade_history

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            RotatingFileHandler(
                'bot.log',
                maxBytes=5*1024*1024,
                backupCount=3,
                encoding='utf-8'
            ),
            logging.StreamHandler()
        ]
    )
    logging.getLogger('aiohttp').setLevel(logging.WARNING)
    logging.getLogger('asyncio').setLevel(logging.WARNING)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv()
setup_logging()
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ['TELEGRAM_API_KEY', 'BYBIT_API_KEY', 'BYBIT_API_SECRET']
for var in required_env_vars:
    if not os.getenv(var):
        logger.critical(f"Missing environment variable: {var}")
        raise ValueError(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è {var}")

TELEGRAM_API_KEY = os.getenv('TELEGRAM_API_KEY')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', '5000'))
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSE_STRATEGY, CHOOSE_SYMBOL, SET_RISK, SET_LEVERAGE, CONFIRM_RUN = range(5)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
trade_engine = TradeEngine()
user_sessions: Dict[int, Dict[str, Any]] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["üìä –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"], 
         ["üìà –°—Ç–∞—Ç—É—Å", "üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"]],
        resize_keyboard=True
    )

def back_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["‚¨Ö –ù–∞–∑–∞–¥"], ["üîù –í –Ω–∞—á–∞–ª–æ", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    try:
        user = update.effective_user
        logger.info(f"User {user.id} started the bot")
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Start command error: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END

async def begin_setup(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} began setup")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:",
        reply_markup=ReplyKeyboardMarkup(
            [["üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1"], ["üìâ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2"], ["‚¨Ö –ù–∞–∑–∞–¥"]],
            resize_keyboard=True
        )
    )
    return CHOOSE_STRATEGY

async def set_strategy(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await start(update, context)
    
    user_sessions[user_id] = {"strategy": text}
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:",
        reply_markup=ReplyKeyboardMarkup(
            [["BTCUSDT", "ETHUSDT"], ["SOLUSDT", "XRPUSDT"], ["‚¨Ö –ù–∞–∑–∞–¥"]],
            resize_keyboard=True
        )
    )
    return CHOOSE_SYMBOL

async def set_symbol(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await begin_setup(update, context)
    
    user_sessions[user_id]["symbol"] = text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (1-5%):",
        reply_markup=ReplyKeyboardMarkup(
            [["1%", "2%", "3%"], ["‚¨Ö –ù–∞–∑–∞–¥"]],
            resize_keyboard=True
        )
    )
    return SET_RISK

async def set_risk(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await set_strategy(update, context)
    
    try:
        risk = float(text.strip('%')) / 100
        user_sessions[user_id]["risk"] = risk
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ—á–æ:",
            reply_markup=ReplyKeyboardMarkup(
                [["2x", "5x", "10x"], ["‚¨Ö –ù–∞–∑–∞–¥"]],
                resize_keyboard=True
            )
        )
        return SET_LEVERAGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5 —Å —Å–∏–º–≤–æ–ª–æ–º %")
        return SET_RISK

async def set_leverage(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await set_risk(update, context)
    
    try:
        leverage = int(text.strip('x'))
        user_sessions[user_id]["leverage"] = leverage
        await update.message.reply_text(
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(
                [["‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å"], ["‚¨Ö –ù–∞–∑–∞–¥"]],
                resize_keyboard=True
            )
        )
        return CONFIRM_RUN
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ—á–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return SET_LEVERAGE

async def confirm_run(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await set_leverage(update, context)
    
    session = user_sessions.get(user_id, {})
    strategy = session.get("strategy", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è 1")
    symbol = session.get("symbol", "BTCUSDT")
    risk = session.get("risk", 0.01)
    leverage = session.get("leverage", 5)
    
    started = trade_engine.start_strategy(symbol, strategy, risk, leverage)
    if started:
        await update.message.reply_text(
            "‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END

async def stop_trading(update: Update, context: CallbackContext):
    stopped = trade_engine.stop_strategy()
    if stopped:
        await update.message.reply_text(
            "‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚Ñπ –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END

async def show_status(update: Update, context: CallbackContext):
    status = trade_engine.get_status()
    await update.message.reply_text(
        status,
        reply_markup=main_menu_keyboard()
    )

async def show_history(update: Update, context: CallbackContext):
    trades = get_trade_history(limit=5)
    message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n" + "\n".join([f"{t[2]} {t[3]}" for t in trades])
    await update.message.reply_text(
        message,
        reply_markup=main_menu_keyboard()
    )

async def unknown(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
        reply_markup=main_menu_keyboard()
    )

async def webhook_handler(update: Update, context: CallbackContext):
    logger.info(f"Received update via webhook: {update.update_id}")

def main():
    try:
        logger.info("Starting bot...")
        app = ApplicationBuilder().token(TELEGRAM_API_KEY).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
        app.add_handler(TypeHandler(Update, webhook_handler))

        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üìä –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É$"), begin_setup)],
            states={
                CHOOSE_STRATEGY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_strategy)],
                CHOOSE_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_symbol)],
                SET_RISK: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_risk)],
                SET_LEVERAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_leverage)],
                CONFIRM_RUN: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_run)],
            },
            fallbacks=[
                CommandHandler("start", start),
                MessageHandler(filters.Regex("^üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏$"), stop_trading)
            ]
        )

        app.add_handler(CommandHandler("start", start))
        app.add_handler(conv_handler)
        app.add_handler(MessageHandler(filters.Regex("^üìà –°—Ç–∞—Ç—É—Å$"), show_status))
        app.add_handler(MessageHandler(filters.Regex("^üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫$"), show_history))
        app.add_handler(MessageHandler(filters.Regex("^üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏$"), stop_trading))
        app.add_handler(MessageHandler(filters.TEXT, unknown))

        if WEBHOOK_URL and WEBHOOK_SECRET:
            app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                webhook_url=f"{WEBHOOK_URL}/{WEBHOOK_SECRET}",
                secret_token=WEBHOOK_SECRET,
                drop_pending_updates=True
            )
        else:
            logger.info("Starting polling...")
            app.run_polling()

    except Exception as e:
        logger.critical(f"Bot crashed: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    main()
