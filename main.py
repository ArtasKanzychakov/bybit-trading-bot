import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
from dotenv import load_dotenv
from trade_engine import TradeEngine

load_dotenv()

TELEGRAM_API_KEY = os.getenv('TELEGRAM_API_KEY')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', '5000'))

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSE_STRATEGY, CHOOSE_SYMBOL, CONFIRM_RUN = range(3)

trade_engine = TradeEngine()
user_state = {}  # user_id: {strategy: ..., symbol: ...}

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"], ["–°—Ç–∞—Ç—É—Å"]],
        resize_keyboard=True
    )

def back_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["‚¨Ö –ù–∞–∑–∞–¥"], ["üîù –í –Ω–∞—á–∞–ª–æ", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]],
        resize_keyboard=True
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Bybit.\n–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –ø–∞—Ä—É.",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

# ---------- –®–∞–≥ 1: –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ----------
async def begin_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–°—Ç—Ä–∞—Ç–µ–≥–∏—è 1"], ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è 2"], ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:", reply_markup=reply_markup)
    return CHOOSE_STRATEGY

async def set_strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text in ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ"]:
        return await start(update, context)
    if text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏":
        return await stop_trading(update, context)

    user_state.setdefault(user_id, {})["strategy"] = text
    keyboard = [["SOLUSDT", "BTCUSDT"], ["ETHUSDT", "XRPUSDT"], ["DOGEUSDT"], ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]]
    await update.message.reply_text(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±—Ä–∞–Ω–∞: {text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CHOOSE_SYMBOL

# ---------- –®–∞–≥ 2: –í—ã–±–æ—Ä –ø–∞—Ä—ã ----------
async def set_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await begin_setup(update, context)
    elif text == "üîù –í –Ω–∞—á–∞–ª–æ":
        return await start(update, context)
    elif text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏":
        return await stop_trading(update, context)

    user_state.setdefault(user_id, {})["symbol"] = text
    keyboard = [["üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"], ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]]
    await update.message.reply_text(
        f"–ü–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞: {text}\n–ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É!",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CONFIRM_RUN

# ---------- –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ----------
async def confirm_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await set_strategy(update, context)
    elif text == "üîù –í –Ω–∞—á–∞–ª–æ":
        return await start(update, context)
    elif text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏":
        return await stop_trading(update, context)

    strategy = user_state[user_id].get("strategy", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è 2")
    symbol = user_state[user_id].get("symbol", "SOLUSDT")
    started = trade_engine.start_strategy(symbol, strategy)

    if started:
        await update.message.reply_text(f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞: {symbol} ({strategy})", reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text("‚ö† –¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.", reply_markup=main_menu_keyboard())

    return ConversationHandler.END

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ ----------
async def stop_trading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stopped = trade_engine.stop_strategy()
    if stopped:
        await update.message.reply_text("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text("‚Ñπ –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# ---------- –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ----------
async def show_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = trade_engine.get_status()
    await update.message.reply_text(status, reply_markup=main_menu_keyboard())

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ /start", reply_markup=main_menu_keyboard())

def main():
    app = ApplicationBuilder().token(TELEGRAM_API_KEY).build()

    app.add_handler(CommandHandler("start", start))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É$"), begin_setup)],
        states={
            CHOOSE_STRATEGY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_strategy)],
            CHOOSE_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_symbol)],
            CONFIRM_RUN: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_run)],
        },
        fallbacks=[MessageHandler(filters.COMMAND, unknown)]
    ))

    app.add_handler(MessageHandler(filters.Regex("^–°—Ç–∞—Ç—É—Å$"), show_status))
    app.add_handler(MessageHandler(filters.Regex("^–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏$"), stop_trading))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_SECRET,
        webhook_url=f"{WEBHOOK_URL}/{WEBHOOK_SECRET}"
    )

if __name__ == "__main__":
    main()
