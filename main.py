import logging
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from dotenv import load_dotenv
from utils import get_balance
from trade_engine import start_trading, stop_trading
import ccxt

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSE_SYMBOL, CHOOSE_TIMEFRAME, MAIN_MENU = range(3)

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
ALLOWED_SYMBOLS = ["BTC/USDT", "ETH/USDT", "XRP/USDT"]
ALLOWED_TIMEFRAMES = ["1m", "5m", "15m", "1h", "4h"]

def get_bybit_account():
    return ccxt.bybit({
        "apiKey": os.getenv("BYBIT_API_KEY_REAL"),
        "secret": os.getenv("BYBIT_API_SECRET_REAL"),
        "enableRateLimit": True,
        "options": {"defaultType": "future"},
    })

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Bybit.\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=ReplyKeyboardMarkup([ALLOWED_SYMBOLS], one_time_keyboard=True),
    )
    return CHOOSE_SYMBOL

async def choose_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symbol = update.message.text.strip()
    if symbol not in ALLOWED_SYMBOLS:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        )
        return CHOOSE_SYMBOL

    context.user_data["symbol"] = symbol
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
        reply_markup=ReplyKeyboardMarkup([ALLOWED_TIMEFRAMES], one_time_keyboard=True),
    )
    return CHOOSE_TIMEFRAME

async def choose_timeframe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    timeframe = update.message.text.strip()
    if timeframe not in ALLOWED_TIMEFRAMES:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        )
        return CHOOSE_TIMEFRAME

    context.user_data["timeframe"] = timeframe
    try:
        context.user_data["exchange"] = get_bybit_account()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    await update.message.reply_text(
        f"‚úÖ –ü–∞—Ä–∞: {context.user_data['symbol']}, –¢–∞–π–º—Ñ—Ä–µ–π–º: {context.user_data['timeframe']}\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/start_trade ‚Äî –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/stop_trade ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å",
        reply_markup=ReplyKeyboardRemove(),
    )
    return MAIN_MENU

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    exchange = context.user_data.get("exchange")
    if not exchange:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        return

    try:
        balance_info = get_balance(exchange)
        await update.message.reply_text(balance_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def start_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    exchange = context.user_data.get("exchange")
    symbol = context.user_data.get("symbol")
    tf = context.user_data.get("timeframe")

    if not all([exchange, symbol, tf]):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º —á–µ—Ä–µ–∑ /start")
        return

    await update.message.reply_text(f"üöÄ –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞—á–∞–ª–∞—Å—å –¥–ª—è {symbol} [{tf}]")

    loop = asyncio.get_event_loop()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
    loop.run_in_executor(None, start_trading, exchange, symbol, tf)

async def stop_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        stop_trading()
        await update.message.reply_text("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ—Ä–≥–æ–≤–ª–∏.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_symbol)],
            CHOOSE_TIMEFRAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_timeframe)],
            MAIN_MENU: [
                CommandHandler("balance", balance),
                CommandHandler("start_trade", start_trade),
                CommandHandler("stop_trade", stop_trade),
                CommandHandler("cancel", cancel),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)
    # –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç –∏—Ö –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("start_trade", start_trade))
    app.add_handler(CommandHandler("stop_trade", stop_trade))
    app.add_handler(CommandHandler("cancel", cancel))

    app.run_polling()

if __name__ == "__main__":
    main()
