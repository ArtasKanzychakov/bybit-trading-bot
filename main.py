import os
import logging
from typing import Dict, Any
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler, CallbackContext
)
from dotenv import load_dotenv
from trade_engine import TradeEngine
from db import get_user_settings, update_user_settings, get_open_trades, get_trade_history

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

required_env_vars = ['TELEGRAM_API_KEY', 'BYBIT_API_KEY', 'BYBIT_API_SECRET']
for var in required_env_vars:
    if not os.getenv(var):
        raise ValueError(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è {var}")

TELEGRAM_API_KEY = os.getenv('TELEGRAM_API_KEY')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', '5000'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSE_STRATEGY, CHOOSE_SYMBOL, SET_RISK, CONFIRM_RUN = range(4)

trade_engine = TradeEngine()
user_sessions: Dict[int, Dict[str, Any]] = {}

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["üìä –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"], 
         ["üìà –°—Ç–∞—Ç—É—Å", "üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"]],
        resize_keyboard=True
    )

def back_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["‚¨Ö –ù–∞–∑–∞–¥"], ["üîù –í –Ω–∞—á–∞–ª–æ", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]],
        resize_keyboard=True
    )

async def start(update: Update, context: CallbackContext):
    try:
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Bybit.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üìä –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –ø–∞—Ä—É.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END

async def begin_setup(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    settings = get_user_settings(user_id)
    
    keyboard = [
        ["üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1 (Bollinger)"],
        ["üìâ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2 (EMA Cross)"],
        ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]
    ]
    
    default_strategy = settings[1] if settings else None
    message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:"
    if default_strategy:
        message += f"\n(–¢–µ–∫—É—â–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_strategy})"
    
    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CHOOSE_STRATEGY

async def set_strategy(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await start(update, context)
    elif text == "üîù –í –Ω–∞—á–∞–ª–æ":
        return await start(update, context)
    elif text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏":
        return await stop_trading(update, context)

    strategy = "–°—Ç—Ä–∞—Ç–µ–≥–∏—è 1" if "1" in text else "–°—Ç—Ä–∞—Ç–µ–≥–∏—è 2"
    user_sessions[user_id] = {"strategy": strategy}
    
    settings = get_user_settings(user_id)
    default_symbol = settings[2] if settings else None
    
    keyboard = [
        ["BTCUSDT", "ETHUSDT"],
        ["SOLUSDT", "XRPUSDT"],
        ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]
    ]
    
    message = f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:"
    if default_symbol:
        message += f"\n(–¢–µ–∫—É—â–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_symbol})"
    
    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CHOOSE_SYMBOL

async def set_symbol(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await begin_setup(update, context)
    elif text == "üîù –í –Ω–∞—á–∞–ª–æ":
        return await start(update, context)
    elif text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏":
        return await stop_trading(update, context)

    user_sessions[user_id]["symbol"] = text
    
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (–≤ % –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞, 0.1-5%):",
        reply_markup=ReplyKeyboardMarkup(
            [["1%", "2%", "3%"], ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ"]],
            resize_keyboard=True
        )
    )
    return SET_RISK

async def set_risk(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await set_strategy(update, context)
    elif text == "üîù –í –Ω–∞—á–∞–ª–æ":
        return await start(update, context)

    try:
        risk = float(text.strip('%')) / 100
        if 0.001 <= risk <= 0.05:
            user_sessions[user_id]["risk"] = risk
            
            strategy = user_sessions[user_id].get("strategy")
            symbol = user_sessions[user_id].get("symbol")
            
            keyboard = [["‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"], ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ"]]
            await update.message.reply_text(
                f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                f"üè∑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <code>{strategy}</code>\n"
                f"üìå –ü–∞—Ä–∞: <code>{symbol}</code>\n"
                f"‚ö† –†–∏—Å–∫: <code>{risk*100}%</code> –Ω–∞ —Å–¥–µ–ª–∫—É",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
                parse_mode='HTML'
            )
            return CONFIRM_RUN
        else:
            await update.message.reply_text(
                "–†–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.1% –∏ 5%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=ReplyKeyboardMarkup(
                    [["1%", "2%", "3%"], ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ"]],
                    resize_keyboard=True
                )
            )
            return SET_RISK
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 5 —Å —Å–∏–º–≤–æ–ª–æ–º % –∏–ª–∏ –±–µ–∑:",
            reply_markup=ReplyKeyboardMarkup(
                [["1%", "2%", "3%"], ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ"]],
                resize_keyboard=True
            )
        )
        return SET_RISK

async def confirm_run(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        return await set_symbol(update, context)
    elif text == "üîù –í –Ω–∞—á–∞–ª–æ":
        return await start(update, context)

    session = user_sessions.get(user_id, {})
    strategy = session.get("strategy", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è 2")
    symbol = session.get("symbol", "BTCUSDT")
    risk = session.get("risk", 0.01)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_settings(user_id, strategy=strategy, symbol=symbol, risk=risk)
    
    started = trade_engine.start_strategy(symbol, strategy, risk)
    if started:
        await update.message.reply_text(
            f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞:\n"
            f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <code>{strategy}</code>\n"
            f"–ü–∞—Ä–∞: <code>{symbol}</code>\n"
            f"–†–∏–∫: <code>{risk*100}%</code>",
            reply_markup=main_menu_keyboard(),
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            "‚ö† –¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END

async def stop_trading(update: Update, context: CallbackContext):
    stopped = trade_engine.stop_strategy()
    if stopped:
        await update.message.reply_text(
            "‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚Ñπ –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END

async def show_status(update: Update, context: CallbackContext):
    status = trade_engine.get_status()
    open_trades = get_open_trades()
    
    message = status
    if open_trades:
        message += "\n\nüìå –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:\n"
        for trade in open_trades:
            message += (
                f"ID: {trade[0]}, {trade[2]} @ {trade[3]}, "
                f"–û–±—ä–µ–º: {trade[5]}, –í—Ö–æ–¥: {trade[6]}\n"
            )
    
    await update.message.reply_text(message, reply_markup=main_menu_keyboard())

async def show_history(update: Update, context: CallbackContext):
    trades = get_trade_history(limit=10)
    if not trades:
        await update.message.reply_text(
            "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    message = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫:\n\n"
    for trade in trades:
        status = "üü¢" if trade[9] == "open" else "üî¥"
        profit = f"{trade[8]:.2f}%" if trade[8] is not None else "N/A"
        message += (
            f"{status} {trade[1]}: {trade[2]} @ {trade[3]} ‚Üí {trade[4] or 'N/A'} "
            f"(–ü—Ä–∏–±—ã–ª—å: {profit})\n"
        )
    
    await update.message.reply_text(message, reply_markup=main_menu_keyboard())

async def unknown(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ /start",
        reply_markup=main_menu_keyboard()
    )

def main():
    try:
        app = ApplicationBuilder().token(TELEGRAM_API_KEY).build()

        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üìä –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É$"), begin_setup)],
            states={
                CHOOSE_STRATEGY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_strategy)],
                CHOOSE_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_symbol)],
                SET_RISK: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_risk)],
                CONFIRM_RUN: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_run)],
            },
            fallbacks=[
                CommandHandler("start", start),
                MessageHandler(filters.Regex("^üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏$"), stop_trading)
            ]
        )

        app.add_handler(CommandHandler("start", start))
        app.add_handler(conv_handler)
        app.add_handler(MessageHandler(filters.Regex("^üìà –°—Ç–∞—Ç—É—Å$"), show_status))
        app.add_handler(MessageHandler(filters.Regex("^üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫$"), show_history))
        app.add_handler(MessageHandler(filters.Regex("^üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏$"), stop_trading))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

        if WEBHOOK_URL and WEBHOOK_SECRET:
            app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=WEBHOOK_SECRET,
                webhook_url=f"{WEBHOOK_URL}/{WEBHOOK_SECRET}"
            )
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
            app.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
