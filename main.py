import os
import logging
from logging.handlers import RotatingFileHandler
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler, CallbackContext
)
from dotenv import load_dotenv
from trade_engine import TradeEngine
from db import get_user_settings, update_user_settings, get_open_trades, get_trade_history

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            RotatingFileHandler(
                'bot.log',
                maxBytes=5*1024*1024,  # 5 MB
                backupCount=3,
                encoding='utf-8'
            ),
            logging.StreamHandler()
        ]
    )
    # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('aiohttp').setLevel(logging.WARNING)
    logging.getLogger('asyncio').setLevel(logging.WARNING)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv()
setup_logging()
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ['TELEGRAM_API_KEY', 'BYBIT_API_KEY', 'BYBIT_API_SECRET']
for var in required_env_vars:
    if not os.getenv(var):
        logger.critical(f"Missing environment variable: {var}")
        raise ValueError(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è {var}")

TELEGRAM_API_KEY = os.getenv('TELEGRAM_API_KEY')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', '5000'))
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSE_STRATEGY, CHOOSE_SYMBOL, SET_RISK, SET_LEVERAGE, CONFIRM_RUN = range(5)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
trade_engine = TradeEngine()
user_sessions: dict[int, dict[str, Any]] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["üìä –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"], 
         ["üìà –°—Ç–∞—Ç—É—Å", "üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"]],
        resize_keyboard=True
    )

def back_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["‚¨Ö –ù–∞–∑–∞–¥"], ["üîù –í –Ω–∞—á–∞–ª–æ", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    try:
        user = update.effective_user
        logger.info(f"User {user.id} started the bot")
        
        balance = await trade_engine.get_balance(force_update=True)
        logger.info(f"Current balance for {user.id}: {balance:.2f} USDT")
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Bybit.\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üìä –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –ø–∞—Ä—É.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Start command error: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END

async def begin_setup(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} began setup")
    
    try:
        balance = await trade_engine.get_balance(force_update=True)
        logger.info(f"User {user_id} balance: {balance:.2f} USDT")
        
        if balance < 5:
            await update.message.reply_text(
                f"‚ö† –í–∞—à –±–∞–ª–∞–Ω—Å ({balance:.2f} USDT) —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç: 10 USDT",
                reply_markup=main_menu_keyboard()
            )
            return ConversationHandler.END
        
        settings = get_user_settings(user_id)
        keyboard = [
            ["üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1 (Bollinger)"],
            ["üìâ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2 (EMA Cross)"],
            ["‚¨Ö –ù–∞–∑–∞–¥", "üîù –í –Ω–∞—á–∞–ª–æ", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏"]
        ]
        
        default_strategy = settings[1] if settings else None
        message = f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:"
        if default_strategy:
            message += f"\n(–¢–µ–∫—É—â–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_strategy})"
        
        await update.message.reply_text(
            message,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        return CHOOSE_STRATEGY
        
    except Exception as e:
        logger.error(f"Begin setup error for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ) ...

async def show_status(update: Update, context: CallbackContext):
    try:
        status = trade_engine.get_status()
        balance = await trade_engine.get_balance(force_update=True)
        open_trades = get_open_trades()
        
        logger.info(f"Status requested. Balance: {balance:.2f} USDT")
        
        message = f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT\n{status}"
        if open_trades:
            message += "\n\nüìå –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:\n"
            for trade in open_trades:
                message += (
                    f"ID: {trade[0]}, {trade[2]} @ {trade[3]}, "
                    f"–û–±—ä–µ–º: {trade[5]}, –í—Ö–æ–¥: {trade[6]}\n"
                )
        
        await update.message.reply_text(
            message, 
            reply_markup=main_menu_keyboard(),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Status error: {e}", exc_info=True)
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.",
            reply_markup=main_menu_keyboard()
        )

async def send_heartbeat(context: ContextTypes.DEFAULT_TYPE):
    try:
        status = trade_engine.get_status()
        balance = await trade_engine.get_balance(force_update=True)
        logger.info(f"Heartbeat sent. Balance: {balance:.2f} USDT")
        
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"‚ù§Ô∏è Heartbeat\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT\n{status}",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Heartbeat error: {e}", exc_info=True)

def main():
    try:
        logger.info("Starting bot initialization...")
        
        app = ApplicationBuilder().token(TELEGRAM_API_KEY).build()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        states = {
            CHOOSE_STRATEGY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_strategy)],
            CHOOSE_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_symbol)],
            SET_RISK: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_risk)],
            SET_LEVERAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_leverage)],
            CONFIRM_RUN: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_run)],
        }

        fallbacks = [
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏$"), stop_trading),
            MessageHandler(filters.Regex("^üìä –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É$"), begin_setup)
        ]

        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üìä –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É$"), begin_setup)],
            states=states,
            fallbacks=fallbacks
        )

        app.add_handler(CommandHandler("start", start))
        app.add_handler(conv_handler)
        app.add_handler(MessageHandler(filters.Regex("^üìà –°—Ç–∞—Ç—É—Å$"), show_status))
        app.add_handler(MessageHandler(filters.Regex("^üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫$"), show_history))
        app.add_handler(MessageHandler(filters.Regex("^üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–∏$"), stop_trading))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        if ADMIN_CHAT_ID:
            app.job_queue.run_repeating(send_heartbeat, interval=3600, first=10)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if WEBHOOK_URL and WEBHOOK_SECRET:
            logger.info("Starting webhook...")
            app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=WEBHOOK_SECRET,
                webhook_url=f"{WEBHOOK_URL}/{WEBHOOK_SECRET}"
            )
        else:
            logger.info("Starting polling...")
            app.run_polling()
            
    except Exception as e:
        logger.critical(f"Bot crashed: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    main()
